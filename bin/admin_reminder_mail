#!/usr/bin/php -q
<?php
/* 
 * admin_reminder_mail:
 * Works out administrative tasks which need doing on WriteToThem, and 
 * sends email.  By default just a test, specify --realrun to really
 * send to the contact address for the site
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: francis@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: admin_reminder_mail,v 1.20 2008-09-11 14:08:32 matthew Exp $
 *
 */
require_once "../conf/general";
require_once "../phplib/queue.php";
require_once "../commonlib/phplib/dadem.php";
require_once "../commonlib/phplib/votingarea.php";
require_once "../commonlib/phplib/utility.php";
function error($str) {
    fwrite(STDERR, "admin_reminder_mail: ERROR: $str\n");
}

function verbose($str) {
    global $verbose;
    if ($verbose)
        fwrite(STDERR, date('r') . " admin_reminder_mail: $str\n");
}

$short_opts = '';
$long_opts = array('help', 'verbose', 'nobadmps', 'realrun');
require_once '../commonlib/phplib/phpcli.php';

$switches = $options[0];
$args = $options[1];
$realrun = 0;
$email_to = '';
if (count($args) > 1) {
    print "Specify at most one argument.\n";
    exit;
}

if (count($args) == 1) {
    $realrun = 1;
    $email_to = $args[0];
}

$verbose = 0;
$dobadmps = 1;
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--nobadmps') $dobadmps = 0;
    if ($switch[0]=='--realrun') $realrun = 1;
    if ($switch[0]=='--help') {
?>

Usage: admin_reminder_mail [--verbose] [--nobadmps] [--realrun] [TO_ADDRESS]

--help      Display this help message
--verbose   Display more information while working
--nobadmps  Don't check for bad MPs
--realrun   Really send email (when not set, prints to standard out unless email address is supplied)
<?php
        exit;
    }
}

verbose("getting admin statistics");
$stats = msg_admin_get_stats(0);
verbose("getting popular referrers");
$freq_referrers_week = msg_admin_get_popular_referrers(60 * 60 * 24 * 7);

// Prepare email...
$mail = '';

// Messages in "need attention" state
verbose("getting messages in 'need attention' state");
$need_attention_messages = msg_admin_get_queue('needattention', array());
$url = OPTION_ADMIN_URL . '?page=fyrqueue';
$need_attention_messages_count = count($need_attention_messages);
if ($need_attention_messages_count > 0) {
    $mail .= "
* $need_attention_messages_count messages are frozen, or have bounced.
  Decide if they are valid, so the real ones can get on their way:
  $url
";
}

// Representatives with bad contact details
verbose("getting representatives with bad contact details");
$bad_contacts = dadem_get_bad_contacts();
dadem_check_error($bad_contacts);
$bad_contacts_info = dadem_get_representatives_info($bad_contacts);
dadem_check_error($bad_contacts_info);
$mps = 0;
$not_mps = 0;
foreach ($bad_contacts_info as $info) {
    if ($info['type'] == 'WMC') {
        $mps++;
    } else {
        $not_mps++;
    }
}

$url = OPTION_ADMIN_URL . '?page=reps&bad_contacts=1';
if ($mps > 0) {
    $mps_constituents = number_format($mps * 60000);
    $mail .= "
* $mps_constituents people are stopped from contacting their MP.
  Phone up $mps offices and get constituency mail faxes/emails:
  $url
";
}
if ($not_mps > 0) {
    $mail .= "
* $not_mps reps/councils have no contact details
  Find out councillor and other rep contact details:
  $url
";
}

// Councils which are not matched
verbose("getting councils which are not matched");
$councils_not_matched = dadem_admin_get_raw_council_status('needattention');
$url = OPTION_ADMIN_SERVICES_CGI . 'match.cgi';
if ($councils_not_matched > 0) {
    $mail .= "
* $councils_not_matched councils have not matched with GovEval data
  Help them along their way:
  $url
";
}

// Combine the first part.
if ($mail) {
    $mail = "Here are some thing to do to make our service smoother and lovelier...
".$mail;
}

// Find MPs with no responsiveness
if ($dobadmps) {
    verbose("finding MPs with no positive responses to questionnaires");
    $badmps = `./badmps`;
    if ($badmps) {
        $mail .= "\n";
        $mail .= $badmps;
    }
}

// Diligency league tables...
$dili_mail = '';
// ... for futzing with the queue
verbose("diligency league - altering the message queue");
$diligency_queue = msg_admin_get_diligency_queue(time() - 60*60*24*7);
if (count($diligency_queue) > 0) {
    $dili_mail .= "* At futzing with the message queue:\n";
    foreach ($diligency_queue as $pair) {
        $dili_mail .= sprintf("%12s %5d", $pair[1], $pair[0]) . "\n";
    }
    $dili_mail .= "\n";
}
// ... for non-council representatives
verbose("diligency league - getting MP and other contact details");
$diligency_reps = dadem_admin_get_diligency_reps(time() - 60*60*24*7);
if (count($diligency_reps) > 0) {
    $dili_mail .= "* At getting MP and other contact details:\n";
    foreach ($diligency_reps as $pair) {
        $dili_mail .= sprintf("%12s %5d", $pair[1], $pair[0]) . "\n";
    }
    $dili_mail .= "\n";
}
// ... for councils over last 7 days
verbose("diligency league - updating councillor info");
$diligency_councils = dadem_admin_get_diligency_council(time() - 60*60*24*7);
if (count($diligency_councils) > 0) {
    $dili_mail .= "* At fixing up councillors and wards:\n";
    foreach ($diligency_councils as $pair) {
        $dili_mail .= sprintf("%12s %5d", $pair[1], $pair[0]) . "\n";
    }
    $dili_mail .= "\n";
}
// ... for doing things on RT
/*
verbose("diligency league - handling customer support in RT");
$diligency_rt = `psql rt rt --pset t -c "
    select users.name, count(*) as c from transactions 
    left join tickets on tickets.id = transactions.objectid 
    left join users on users.id = transactions.creator 
    left join queues on queues.id = tickets.queue
    where objecttype = 'RT::Ticket' and nickname is not null and transactions.type = 'Status' and 
            transactions.created > now() - '1 week'::interval and queues.name = 'WriteToThem'
    group by users.name 
    order by c desc
    ;"`;
$diligency_rt = str_replace("|", " ", $diligency_rt);
$dili_mail .= "* At lovingly dealing with mail from our users:\n";
$dili_mail .= $diligency_rt;
*/
// Combine the second part.
if ($dili_mail) {
    if ($mail) {
    $mail .= "

And this week's most diligent were (please, take a bow!)...

";  } else {
    $mail .= "This week's most diligent were (please, take a bow!)...

";
    }
    $mail .= $dili_mail;
}

// Statistics
verbose("generating general statistics");
$mail .= "
Finally, some statistics to keep you happy...

"; 
$mail .= "* " . $stats["created_24"] . " new messages in last day\n\n";
$mail .= "* " . $stats["created_168"] . " new messages in last week\n\n";
$mail .= "* Top 10 referrers this week, and number of messages they caused:\n";
$n = 0;
foreach ($freq_referrers_week as $row) {
    if ($row[1] > 1 && $row[0] != "") {
        $n++;
        $mail .= sprintf("%5d %s", $row[1], $row[0]) . "\n";
    }
    if ($n == 10)
        break;
}
$mail .= "\n";

// Send mail
if ($mail) {
    $subject ="WriteToThem needs some tender loving care";
    $mail .="
That's all for this week!

-- The Quality Deity";
$from = OPTION_CONTACT_EMAIL;
$dest = $from;
if ($email_to) {
    $dest = $email_to;
}

    if ($realrun) {
        verbose("sending email to $dest");
        mail($dest, $subject, $mail,
            "From: The Quality Deity <$from>\n".
            "X-Mailer: PHP/" . phpversion());
    } else {
        verbose("printing email");
        print "To: $dest\n\n"; 
        print "Subject: $subject\n\n";
        print $mail;
    }
}

