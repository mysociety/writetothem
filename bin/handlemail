#!/usr/bin/perl -w
#
# handlemail:
# Handle an individual incoming mail message.
#
# This script should be invoked through the .forward mechanism. It processes
# bounce messages and saves their text in the database for review by an
# administrator.
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: handlemail,v 1.44 2009-10-08 15:09:07 louise Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";

use MIME::Entity;
use POSIX qw(strftime);

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::SystemMisc qw(print_log);
use mySociety::EmailUtil;
use mySociety::HandleMail;

# Don't print diagnostics to standard error, as this can result in bounce
# messages being generated (only in response to non-bounce input, obviously).
mySociety::SystemMisc::log_to_stderr(0);

use FYR;
use FYR::EmailTemplate;
use FYR::Queue;

# logmsg_handler ID TIME STATE MESSAGE IMPORTANT
# Callback for logmsg, so that we log messages to the system log as well as
# to the message log in the database.
sub logmsg_handler ($$$$$) {
    my ($id, $time, $state, $msg, $important) = @_;
    print_log($important ? 'info' : 'notice',
            "message $id($state): $msg");
    print_log($important ? 'info' : 'notice',
            "last message delayed by " . (time() - $time) . " seconds")
                if ($time > time() + 5);
}

FYR::Queue::logmsg_set_handler(\&logmsg_handler);

my %data = mySociety::HandleMail::get_message();
my @lines = @{$data{lines}};

if (!$data{is_bounce_message}) {
    # This is not a bounce message. We pass it on to the contact email address
    # and also send a patronising response about clicking the link.
    #print_log('info', "message was not a bounce message");

    exit 0 if is_ignorable($data{message});

    # See whether the email contains one of our URLs.
    my ($first_url, $confirm_url, $yes_url, $no_url);
    foreach (@lines) {
        my $base_url = mySociety::Config::get('BASE_URL');
        if (m#($base_url/[CNY]/[2-7A-Za-z]{10}[./_]?[2-7A-Za-z]{10,})#) {
            my $url = $1;
            $first_url = $url if !$first_url;
            $confirm_url = $url if ($url =~ m#/C/#);
            $yes_url = $url if ($url =~ m#/Y/#);
            $no_url = $url if ($url =~ m#/N/#);
        }
    }

    my $forward = 0;
    if ($first_url) {
        print_log('info', "mail contains first URL $first_url");
        my $h = dbh();
        local $h->{HandleError};
        if (!$h->do('
                    insert into confirmation_mail_autoreply
                            (url, whenreceived)
                    values (?, ?)',
                    {}, $first_url, time())) {
            # Have already sent an autoreply to this one, so forward instead
            print_log('info', "have already sent one autoresponse for this confirm/questionnaire URL");
            $forward = 1;
        }
    } else {
        # No URL, so just forward rather than autoreply
        $forward = 1;
    }

    if ($forward) {
        # Forward this on to the originating address
        if (mySociety::EmailUtil::EMAIL_SUCCESS
                != mySociety::EmailUtil::send_email(join("\n", @lines) . "\n", $data{return_path}, mySociety::HandleMail::get_bounce_recipient($data{message}))) {
            print_log('err', 'unable to forward non-bounce to originating email address; deferring');
            exit(75);
        }

        exit(0);
    }

    # OK, we drop the message here, and send patronising reply instead
    #print_log('info', "sending patronising reply");

    # Now we need to construct some text to send to them.
    my $template = 'reply-autoresponse';
    my $vv = {
        contact_email => mySociety::Config::get('CONTACT_EMAIL')
    };
    if ($confirm_url) {
        $template = 'reply-autoresponse-confirm';
        $vv->{'confirm_url'} = $confirm_url;
    } elsif ($yes_url && $no_url) {
        $template = 'reply-autoresponse-questionnaire';
        $vv->{'yes_url'} = $yes_url;
        $vv->{'no_url'} = $no_url;
    }

    my $text = FYR::EmailTemplate::format(
                    FYR::Queue::email_template($template, ''),
                    $vv
                );

    $text = FYR::Queue::wrap(FYR::Queue::EMAIL_COLUMNS, $text);

    my $from = sprintf('%sDO-NOT-REPLY@%s',
                    mySociety::Config::get('EMAIL_PREFIX'),
                    mySociety::Config::get('EMAIL_DOMAIN'));

    # We generate this as a bounce.
    my $mail = MIME::Entity->build(
                    Sender => '<>',
                    From => mySociety::Email::format_email_address("WriteToThem", $from),
                    To => $data{return_path},
                    Subject => 'Automatic reply to your message to WriteToThem',
                    Date => strftime('%a, %e %b %Y %H:%M:%S %z', localtime(FYR::DB::Time())),
                    Type => 'text/plain; charset="utf-8"',
                    Encoding => 'quoted-printable',
                    Data => FYR::Queue::as_utf8_octets($text)
                );

    if (mySociety::EmailUtil::EMAIL_SUCCESS
            != mySociety::EmailUtil::send_email($mail->stringify(), '<>', $data{return_path})) {
        print_log('err', 'unable to send patronising reply; deferring');
        exit(75);
    }

    dbh()->commit();

    exit(0);
}

# Now we have a bounce. We need to know the address to which it was sent so
# that we can distinguish VERP bounces (which must be recorded) from others
# which we don't care about.
my $a = mySociety::HandleMail::get_bounce_recipient($data{message});

my $token = mySociety::HandleMail::get_token($a,
    mySociety::Config::get('EMAIL_PREFIX'), mySociety::Config::get('EMAIL_DOMAIN')
);
exit(0) unless $token;
my $id;
if ($token eq 'bounce-null' || $token eq 'DO-NOT-REPLY' || $token eq 'do-not-reply') {
    print_log('warning', "bounce received for don't-care email");
} elsif (defined($id = FYR::Queue::check_token('bounce', $token))) {
    my $msg = FYR::Queue::message($id, 1);    # lock message
    if (!defined($msg)) {
        print_log('err', "bounce received for non-existent message '$id'; discarding");
        dbh()->rollback();
    } else {
        # Record the bounce
        FYR::Queue::logmsg($id, 1, "received email bounce message", 'handlemail');
        dbh()->do('insert into message_bounce (message_id, whenreceived, bouncetext) values (?, ?, ?)', {}, $id, time(), join("\n", @lines) . "\n");

        my $r = mySociety::HandleMail::parse_dsn_bounce(\@lines);

        if (!defined($r)) {
            FYR::Queue::logmsg($id, 1, "bounce message could not be parsed as an RFC1892/1894 DSN", 'handlemail');
            if ($msg->{state} eq 'bounce_wait') { # XXX is this condition right?
                FYR::Queue::state($id, 'bounce_confirm');
            }
        } else {
            my %attributes = %{$r};  
            my $status = $attributes{status};
            my $what;
            my $nextstate;
            
            # Generic handling of the defined status classes.
            # These are defined in http://www.faqs.org/rfcs/rfc1893.html
            if ($status =~ /^2\./) {
                $what = 'success';
                if ($msg->{state} ne 'sent') {
                    # This is actually a pretty unlikely case, because we don't
                    # request delivery notification; we should perhaps ignore
                    # it.
                    $nextstate = 'sent'
                }
            } elsif ($status =~ /^4\./) {
                $what = 'persistent transient failure';
                if ($msg->{state} eq 'bounce_wait') {
                    # Reset the timer.
                    $nextstate = 'bounce_wait';
                }
            } elsif ($status =~ /^5\./) {
                $what = 'permanent failure';
                if ($msg->{state} ne 'finished') { # XXX is this condition right? Don't send error email if message scrubbed:
                    # Can only really happen with Demon's 30 day bounce...
                    $nextstate = 'error';
                }
            } else {
                # Dunno what this is; need operator attention.
                $what = 'unknown status';
                $nextstate = 'bounce_confirm';  # XXX check current state as above?
            }

            FYR::Queue::logmsg($id, 1, "message delivery status: $status ($what)", 'handlemail');

            # Special cases.
            if ($status eq '5.2.2') {
                # "Mailbox over storage limit". Although this is a transient
                # condition, it has resulted in a permanent failure for this
                # message. We should retry in due course, so put the message
                # back into the ready state.
                $nextstate = 'ready';
                FYR::Queue::logmsg($id, 1, "message bounced because recipient's mailbox is full; retrying delivery", 'handlemail');
            }

            FYR::Queue::state($id, $nextstate) if ($nextstate);
        }
        
        dbh()->commit();
    }
} else {
    print_log('err', "received bounce with invalid token '$token'; discarding");
}

exit(0);

# ---

sub is_ignorable {
    my $m = shift;
    my $head = $m->head();
    return 0 unless $head;
    my ($from, $subject, $body) = ($head->get('From'), $head->get('Subject'), $m->body);
    $body = join("\n", @$body);
    return 0 unless $from && $subject && $body;

    open my $fp, "$FindBin::Bin/../../data/ignored-emails.csv" or return 0;
    while (<$fp>) {
        chomp;
        my ($f, $s, $b) = split /,/;
        next unless $f || $s || $b;
        return 1 unless ( $f && $from !~ /$f/ ) || ( $s && $subject !~ /$s/ ) || ( $b && $body !~ /$b/ );
    }
    return 0;
}
