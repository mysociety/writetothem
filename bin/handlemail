#!/usr/bin/perl -w
#
# handlemail:
# Handle an individual incoming mail message.
#
# This script should be invoked through the .forward mechanism. It processes
# bounce messages and saves their text in the database for review by an
# administrator, or auto-replies or forwards on.
#
# Copyright (c) 2014 UK Citizens Online Democracy. All rights reserved.
# WWW: http://www.mysociety.org/

# ---
# Set up gubbins

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";

use MIME::Entity;
use Email::MIME;
use Encode qw(decode);
use POSIX qw(strftime);

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::SystemMisc qw(print_log);
use mySociety::EmailUtil;
use mySociety::HandleMail;

# Don't print diagnostics to standard error, as this can result in bounce
# messages being generated (only in response to non-bounce input, obviously).
mySociety::SystemMisc::log_to_stderr(0);

use FYR;
use FYR::EmailTemplate;
use FYR::Queue;

# logmsg_handler ID TIME STATE MESSAGE IMPORTANT
# Callback for logmsg, so that we log messages to the system log as well as
# to the message log in the database.
sub logmsg_handler ($$$$$) {
    my ($id, $time, $state, $msg, $important) = @_;
    print_log($important ? 'info' : 'notice',
            "message $id($state): $msg");
    print_log($important ? 'info' : 'notice',
            "last message delayed by " . (time() - $time) . " seconds")
                if ($time > time() + 5);
}

FYR::Queue::logmsg_set_handler(\&logmsg_handler);

# ---
# Main flow

my %data = mySociety::HandleMail::get_message();
my @lines = @{$data{lines}};
my $token = get_envelope_token();
my $verp = ($token ne 'bounce-null' && $token ne 'DO-NOT-REPLY' && $token ne 'do-not-reply');
my $id = get_message_id();

if (!$data{is_bounce_message}) {
    # This is not a bounce message. If it's to a VERP address, pass it on to
    # the message sender; otherwise send an auto-reply or forward to support.
    if ($verp) {
        handle_non_bounce_to_verp_address();
    } else {
        handle_non_bounce_to_null_address();
    }
} else {
    # Now we have a bounce. We don't care about non-VERP bounces.
    if ($verp) {
        handle_bounce_to_verp_address();
    } else {
        print_log('warning', "bounce received for don't-care email");
    }
}

exit(0);

# ---

sub get_envelope_token {
    my $m = $data{message};

    # If we have a special suffix header for the local part suffix, use that.
    # This is set by our exim so we have access to it through the domain name
    # forwarding and routers.
    my $suffix = $m->head()->get("X-Delivered-Suffix");
    if ($suffix) {
        chomp $suffix;
        return substr($suffix, 1);
    }

    # Otherwise, fall back to To header
    my $a = mySociety::HandleMail::get_bounce_recipient($m);

    my $token = mySociety::HandleMail::get_token($a,
        mySociety::Config::get('EMAIL_PREFIX'), mySociety::Config::get('EMAIL_DOMAIN')
    );
    exit 0 unless $token; # Don't care unless we have a token

    return $token;
}

sub get_message_id {
    return undef unless $verp;
    my $id = FYR::Queue::check_token('bounce', $token);
    if (!defined($id)) {
        print_log('err', "received bounce with invalid token '$token'; discarding");
        exit 0;
    }
    return $id;
}

sub handle_non_bounce_to_verp_address {
    my $msg = FYR::Queue::message($id);
    if (!defined($msg)) {
        print_log('err', "email received for non-existent message '$id'; discarding");
    } else {
        # Send on to originator of WTT message
        print_log('info', "Forwarding email to message sender");
        my $text = join("\n", @lines) . "\n";
        my $recipient = $msg->{sender_email};
        if (!$recipient) {
            print_log('err', 'unable to forward non-bounce to anonymized sender; discarding');
            exit 0;
        }
        if (mySociety::EmailUtil::EMAIL_SUCCESS
                != mySociety::EmailUtil::send_email($text, '<>', $recipient)) {
            print_log('err', 'unable to forward non-bounce to sender email address; deferring');
            exit(75);
        }
    }
}

sub handle_non_bounce_to_null_address {
    # See whether the email contains one of our URLs.
    my ($first_url, $confirm_url, $yes_url, $no_url, $unsatisfactory_url, $not_expected_url);
    foreach (@lines) {
        my $base_url = mySociety::Config::get('BASE_URL');
        if (m#($base_url/[CNYUE]/[2-7A-Za-z]{10}[./_]?[2-7A-Za-z]{10,})#) {
            my $url = $1;
            $first_url = $url if !$first_url;
            $confirm_url = $url if ($url =~ m#/C/#);
            $yes_url = $url if ($url =~ m#/Y/#);
            $no_url = $url if ($url =~ m#/N/#);
            $unsatisfactory_url = $url if ($url =~ m#/U/#);
            $not_expected_url = $url if ($url =~ m#/E/#);
        }
    }

    my $discard = 0;
    if ($first_url) {
        print_log('info', "mail contains first URL $first_url");
        my $h = dbh();
        local $h->{HandleError};
        if (!$h->do('
                    insert into confirmation_mail_autoreply
                            (url, whenreceived)
                    values (?, ?)',
                    {}, $first_url, time())) {
            # Have already sent an autoreply to this one, so discard instead
            print_log('info', "have already sent one autoresponse for this confirm/questionnaire URL");
            $discard = 1;
        }
    } else {
        # No URL, so just discard rather than autoreply
        $discard = 1;
    }

    if ($discard) {
        return;
    }

    # OK, we drop the message here, and send patronising reply instead
    #print_log('info', "sending patronising reply");

    # Now we need to construct some text to send to them.
    my $template = 'reply-autoresponse';
    my $vv = {
        contact_email => mySociety::Config::get('CONTACT_EMAIL')
    };
    if ($confirm_url) {
        $template = 'reply-autoresponse-confirm';
        $vv->{'confirm_url'} = $confirm_url;
    } elsif ($yes_url && $no_url) {
        $template = 'reply-autoresponse-questionnaire';
        $vv->{'yes_url'} = $yes_url;
        $vv->{'no_url'} = $no_url;
        $vv->{'unsatisfactory_url'} = $unsatisfactory_url;
        $vv->{'not_expected_url'} = $not_expected_url;
    }

    my $text = FYR::EmailTemplate::format(
                    FYR::Queue::email_template($template, ''),
                    $vv
                );

    $text = FYR::Queue::wrap(FYR::Queue::EMAIL_COLUMNS, $text);
    $text = FYR::Queue::build_text_email($text);

    my $html = FYR::Queue::build_html_email($template, {}, $vv);

    my $from_name = FYR::Queue::email_sender_name();
    my $from_email = FYR::Queue::do_not_reply_sender();

    # We generate this as a bounce.
    my $mail = Email::MIME->create(
        header_str => [
            Sender => '<>',
            From => mySociety::Email::format_email_address($from_name, $from_email),
            To => $data{return_path},
            Subject => "Automatic reply to your message to WriteToThem",
            Date => strftime('%a, %e %b %Y %H:%M:%S %z', localtime(FYR::DB::Time())),
        ],
        parts => [ $text, $html ],
        attributes => {
            charset => 'utf-8',
            content_type => 'multipart/alternative',
        },
    );

    if (mySociety::EmailUtil::EMAIL_SUCCESS
            != mySociety::EmailUtil::send_email($mail->as_string(), '<>', $data{return_path})) {
        print_log('err', 'unable to send patronising reply; deferring');
        exit(75);
    }

    dbh()->commit();
}

sub handle_bounce_to_verp_address {
    my $r = mySociety::HandleMail::parse_dsn_bounce(\@lines);

    # Check if the Subject looks like an auto-reply rather than a delivery bounce.
    # If so, treat as if it were a normal email
    if (!defined($r)) {
        my $subject = $data{message}->head()->get("Subject");
        $subject = decode("MIME-Header", $subject);
        if ($subject =~ /Auto(matic|mated)?[ -]?(reply|response)|Thank you for your email|Out of Office|This office is closed until|^Re: Letter from|^Auto: /i) {
            print_log('info', "Treating bounce as auto-reply to sender");
            handle_non_bounce_to_verp_address();
            return;
        }
    }

    my $msg = FYR::Queue::message($id, 1); # lock message
    if (!defined($msg)) {
        print_log('err', "bounce received for non-existent message '$id'; discarding");
        dbh()->rollback();
    } else {
        # Record the bounce
        FYR::Queue::logmsg($id, 1, "received email bounce message", 'handlemail');
        dbh()->do('insert into message_bounce (message_id, whenreceived, bouncetext) values (?, ?, ?)', {}, $id, time(), join("\n", @lines) . "\n");

        if (!defined($r)) {
            FYR::Queue::logmsg($id, 1, "bounce message could not be parsed as an RFC1892/1894 DSN", 'handlemail');
            if ($msg->{state} eq 'bounce_wait') { # XXX is this condition right?
                FYR::Queue::state($id, 'bounce_confirm');
            }
        } else {
            my %attributes = %{$r};
            my $status = $attributes{status};
            my $what;
            my $nextstate;

            # Generic handling of the defined status classes.
            # These are defined in http://www.faqs.org/rfcs/rfc1893.html
            if ($status =~ /^2\./) {
                $what = 'success';
                if ($msg->{state} ne 'sent') {
                    # This is actually a pretty unlikely case, because we don't
                    # request delivery notification; we should perhaps ignore
                    # it.
                    $nextstate = 'sent'
                }
            } elsif ($status =~ /^4\./) {
                $what = 'persistent transient failure';
                if ($msg->{state} eq 'bounce_wait') {
                    # Reset the timer.
                    $nextstate = 'bounce_wait';
                }
            } elsif ($status =~ /^5\./) {
                $what = 'permanent failure';
                if ($msg->{state} ne 'finished') { # XXX is this condition right? Don't send error email if message scrubbed:
                    # Can only really happen with Demon's 30 day bounce...
                    $nextstate = 'error';
                }
            } else {
                # Dunno what this is; need operator attention.
                $what = 'unknown status';
                $nextstate = 'bounce_confirm';  # XXX check current state as above?
            }

            FYR::Queue::logmsg($id, 1, "message delivery status: $status ($what)", 'handlemail');

            # Special cases.
            if ($status eq '5.2.2') {
                # "Mailbox over storage limit". Although this is a transient
                # condition, it has resulted in a permanent failure for this
                # message. We should retry in due course, so put the message
                # back into the ready state.
                $nextstate = 'ready';
                FYR::Queue::logmsg($id, 1, "message bounced because recipient's mailbox is full; retrying delivery", 'handlemail');
            }

            FYR::Queue::state($id, $nextstate) if ($nextstate);
        }

        dbh()->commit();
    }
}
